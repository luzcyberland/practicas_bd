/*Procedimientos y Funciones*/

/*Desarrolle la función F_OBTENER_SALARIO, la cual, dada la cédula de un empleado, devuelve su
salario actual (recuerde que el salario actual está determinado por la posición vigente del empleado):
Posteriormente, seleccione cédula, nombre y apellido y salario de la tabla B_EMPLEADOS. El
salario deberá ser obtenido a través de la función creada.*/

CREATE OR REPLACE FUNCTION  F_OBTENER_SALARIO(PCEDULA IN NUMBER) RETURN NUMBER 
IS 
	V_ASIGNACION B_CATEGORIAS_SALARIALES.ASIGNACION%TYPE;

BEGIN 
	SELECT CAT.ASIGNACION INTO V_ASIGNACION
	FROM B_EMPLEADOS E
	JOIN B_POSICION_ACTUAL P 
	ON E.CEDULA  = P.CEDULA 
	JOIN B_CATEGORIAS_SALARIALES CAT ON 
	CAT.COD_CATEGORIA  = P.COD_CATEGORIA 
	WHERE E.CEDULA = PCEDULA
	AND P.FECHA_FIN IS NULL 
	AND CAT.FECHA_FIN IS NULL;

	IF V_ASIGNACION IS NULL THEN
		RETURN -1;
	ELSE
		RETURN V_ASIGNACION;
	END IF;
EXCEPTION 	
	WHEN OTHERS THEN
	RAISE_APPLICATION_ERROR(-20000, 'OCURRIO UN ERROR DE EJECUCION EN F_OBTENER_SALARIO '|| SQLERRM);
END;

DECLARE
	PCEDULA B_EMPLEADOS.CEDULA%TYPE := :PCI;
	OCEDULA B_EMPLEADOS.CEDULA%TYPE;	
	ENOMBRE B_EMPLEADOS.NOMBRE%TYPE;
	EAPELLIDO B_EMPLEADOS.APELLIDO%TYPE;
	SALARIO B_CATEGORIAS_SALARIALES.ASIGNACION%TYPE;
BEGIN
	SELECT CEDULA, NOMBRE, APELLIDO , F_OBTENER_SALARIO(PCEDULA) INTO OCEDULA, ENOMBRE,EAPELLIDO, SALARIO
	FROM B_EMPLEADOS 
	WHERE CEDULA =PCEDULA;
	DBMS_OUTPUT.PUT_LINE('NOMBRE: '||ENOMBRE || ' APELLIDO: '|| EAPELLIDO|| ' SALARIO: ' || SALARIO);
END;
	
/*3. Cree el procedimiento P_GENERAR_PLAN que recibe como parámetro un ID de la tabla VENTAS.
El procedimiento generará el plan de pago (cuotas) a pagar. La generación se hará sólo si el PLAZO
es mayor a 1. Genere con el siguiente criterio:
- Si plazo = 30, 1 sola cuota con 1,5% de interés
- Si plazo = 60, 2 cuotas con 3% de interés sobre el monto total de venta
- Si plazo = 90, 3 cuotas con 5% de interés sobre el monto total de venta.
Los vencimientos serán mensuales a partir de la fecha de venta.	*/
SELECT * FROM B_VENTAS;
CREATE OR REPLACE PROCEDURE P_GENERAR_PLAN(PID IN NUMBER) IS 
NRO_PLAZO B_VENTAS.PLAZO%TYPE;
EXISTE_VENTA NUMBER;
TOTAL B_VENTAS.MONTO_TOTAL%TYPE;
BEGIN 
	SELECT COUNT(*) INTO EXISTE_VENTA FROM B_VENTAS WHERE ID =PID AND TIPO_VENTA = 'CR';
	IF EXISTE_VENTA = 0 THEN 
		DBMS_OUTPUT.PUT_LINE('NO EXISTEN VENTAS CON ESE ID ');
	ELSE
		SELECT MONTO_TOTAL, PLAZO INTO TOTAL, NRO_PLAZO FROM B_VENTAS WHERE ID = PID;
		IF NRO_PLAZO = 30 THEN
			INSERT INTO B_PLAN_PAGO(ID_VENTA, NUMERO_CUOTA,MONTO_CUOTA,VENCIMIENTO,FECHA_PAGO)
			VALUES(PID, 1,ROUND(TOTAL+ TOTAL* 0.015),SYSDATE,NULL);
			COMMIT;
		ELSIF NRO_PLAZO = 60 THEN
			FOR CUOTA IN 1..2 LOOP
		 	INSERT INTO B_PLAN_PAGO(ID_VENTA, NUMERO_CUOTA,MONTO_CUOTA,VENCIMIENTO,FECHA_PAGO)
			VALUES(PID, CUOTA,ROUND(TOTAL + TOTAL* 0.03),SYSDATE,NULL);
			COMMIT;
			END LOOP;
		ELSIF NRO_PLAZO = 90 THEN
			FOR CUOTA IN 1..3 LOOP
			INSERT INTO B_PLAN_PAGO(ID_VENTA, NUMERO_CUOTA,MONTO_CUOTA,VENCIMIENTO,FECHA_PAGO)
			VALUES(PID, CUOTA, ROUND(TOTAL + TOTAL* 0.03),SYSDATE,NULL);
			COMMIT;
			END LOOP;
		END IF;
	END IF;
EXCEPTION
	WHEN OTHERS THEN 
		DBMS_OUTPUT.PUT_LINE('OCURRIO UN ERROR  '|| SQLERRM);
END ;

/*Cree el procedimiento P_AUMENTAR_SALARIOS que recibe como parámetro el porcentaje de
aumento, y lo aplica sobre la tabla de categorías.*/

CREATE OR REPLACE PROCEDURE P_AUMENTAR_SALARIOS (PORCENTAJE NUMBER)IS 
BEGIN 
	UPDATE B_CATEGORIAS_SALARIALES 
	SET ASIGNACION  = ASIGNACION + ASIGNACION * PORCENTAJE;
	COMMIT;
END;



